//  Define the variables
    Int_t numevents = tr->GetEntries();
    std::vector<Float_t> *elePt = 0;
    std::vector<Float_t> *muPt = 0;
    std::vector<Float_t> *jetPt = 0;
    std::vector<Float_t> *phoEt = 0;
    std::vector<Float_t> *phoEta = 0;
    std::vector<Float_t> *phoPhi = 0;
    Int_t nEle = 0;
    Int_t nMu = 0;
    Int_t nJet = 0;
    Int_t nBJet = 0;
    Int_t nPho = 0;
    Int_t lumis = 0;
    Float_t evtWeight = 0;
    Float_t btagWeight_1a = 0;
    Float_t prefireSF = 0;
    Float_t muEffWeight = 0;
    Float_t eleEffWeight = 0;
    Float_t TopHad_pt = 0;
    Float_t TopLep_pt = 0;
    Float_t TopHad_eta = 0;
    Float_t TopLep_eta = 0;
    Float_t TopLep_phi = 0;
    Float_t TopHad_phi = 0;
    Float_t Mt_blgammaMET = 0; // toplepmass
    Float_t M_bjj = 0;         // tophadmass
    Float_t TopLep_charge = 0;
    Float_t PUweight = 0;
    bool passPresel_Ele;
    bool passPresel_Mu;
    Float_t Rapidity_T_ele; // taking T for top quark
    Float_t Rapidity_t_ele; // taking t for antitop quark
    Float_t Rapidity_T_mu;
    Float_t Rapidity_t_mu;
    Float_t Rapidity_T1; // selection 1
    Float_t Rapidity_t1; // selection 1
    Float_t Rapidity_T2; // selection 2
    Float_t Rapidity_t2; // selection 2
    Float_t PhoRapidity;
    Float_t Mass_top;
    Float_t Mass_antitop;
    Float_t ttbar_mass;

    ///////////////////////////////////////////////////////////////Set Branch Status//////////////////////////////////////////////////////////////////

  tr->SetBranchStatus("*", 0);
  tr->SetBranchStatus("elePt", 1);
  tr->SetBranchStatus("muPt", 1);
  tr->SetBranchStatus("jetPt", 1);
  tr->SetBranchStatus("phoEt", 1);
  tr->SetBranchStatus("phoEta", 1);
  tr->SetBranchStatus("phoPhi", 1);
  tr->SetBranchStatus("nEle", 1);
  tr->SetBranchStatus("nMu", 1);
  tr->SetBranchStatus("nJet", 1);
  tr->SetBranchStatus("nBJet", 1);
  tr->SetBranchStatus("nPho", 1);
  tr->SetBranchStatus("TopHad_pt", 1);
  tr->SetBranchStatus("TopLep_pt", 1);
  tr->SetBranchStatus("TopHad_eta", 1);
  tr->SetBranchStatus("TopLep_eta", 1);
  tr->SetBranchStatus("TopHad_phi", 1);
  tr->SetBranchStatus("TopLep_phi", 1);
  tr->SetBranchStatus("M_bjj", 1);
  tr->SetBranchStatus("Mt_blgammaMET", 1);
  tr->SetBranchStatus("TopLep_charge", 1);
  tr->SetBranchStatus("passPresel_Ele", 1);
  tr->SetBranchStatus("passPresel_Mu", 1);
  tr->SetBranchStatus("lumis", 1);
  tr->SetBranchStatus("evtWeight", 1);
  tr->SetBranchStatus("btagWeight_1a", 1);
  tr->SetBranchStatus("prefireSF", 1);
  tr->SetBranchStatus("muEffWeight", 1);
  tr->SetBranchStatus("eleEffWeight", 1);
  tr->SetBranchStatus("PUweight", 1);

   /////////////////////////////////////////////////////////////Set Branch Address/////////////////////////////////////////////////////////////////
  tr->SetBranchAddress("elePt", &elePt);
  tr->SetBranchAddress("muPt", &muPt);
  tr->SetBranchAddress("jetPt", &jetPt);
  tr->SetBranchAddress("phoEt", &phoEt);
  tr->SetBranchAddress("phoEta", &phoEta);
  tr->SetBranchAddress("phoPhi", &phoPhi);
  tr->SetBranchAddress("nEle", &nEle);
  tr->SetBranchAddress("nMu", &nMu);
  tr->SetBranchAddress("nJet", &nJet);
  tr->SetBranchAddress("nBJet", &nBJet);
  tr->SetBranchAddress("nPho", &nPho);
  tr->SetBranchAddress("Mt_blgammaMET", &Mt_blgammaMET); // toplepmass
  tr->SetBranchAddress("M_bjj", &M_bjj);                 // tophadmass
  tr->SetBranchAddress("TopHad_pt", &TopHad_pt);
  tr->SetBranchAddress("TopLep_pt", &TopLep_pt);
  tr->SetBranchAddress("TopHad_eta", &TopHad_eta);
  tr->SetBranchAddress("TopLep_eta", &TopLep_eta);
  tr->SetBranchAddress("TopHad_phi", &TopHad_phi);
  tr->SetBranchAddress("TopLep_phi", &TopLep_phi);
  tr->SetBranchAddress("TopLep_charge", &TopLep_charge);
  tr->SetBranchAddress("passPresel_Ele", &passPresel_Ele);
  tr->SetBranchAddress("passPresel_Mu", &passPresel_Mu);
  tr->SetBranchAddress("lumis", &lumis);
  tr->SetBranchAddress("btagWeight_1a", &btagWeight_1a);
  tr->SetBranchAddress("evtWeight", &evtWeight);
  tr->SetBranchAddress("prefireSF", &prefireSF);
  tr->SetBranchAddress("muEffWeight", &muEffWeight);
  tr->SetBranchAddress("eleEffWeight", &eleEffWeight);
  tr->SetBranchAddress("PUweight", &PUweight);

  double weight = 0;

    /////////////////////////////////////////////////////Initialize//////////////////////////////////////////////////////////////////////
  float N_plus_ele1 = 0;
  float N_plus_ele2 = 0;
  float N_plus_ele3 = 0;
  float N_plus_ele4 = 0;
  float N_plus_ele5 = 0;
  float N_plus_ele6 = 0;
  float N_plus_ele7 = 0;
  float N_plus_ele8 = 0;
  float N_minus_ele1 = 0;
  float N_minus_ele2 = 0;
  float N_minus_ele3 = 0;
  float N_minus_ele4 = 0;
  float N_minus_ele5 = 0;
  float N_minus_ele6 = 0;
  float N_minus_ele7 = 0;
  float N_minus_ele8 = 0;
  float N_plus_ele = 0;
  float N_minus_ele = 0;
  float N_plus_mu1 = 0;
  float N_plus_mu2 = 0;
  float N_plus_mu3 = 0;
  float N_plus_mu4 = 0;
  float N_plus_mu5 = 0;
  float N_plus_mu6 = 0;
  float N_plus_mu7 = 0;
  float N_plus_mu8 = 0;
  float N_minus_mu1 = 0;
  float N_minus_mu2 = 0;
  float N_minus_mu3 = 0;
  float N_minus_mu4 = 0;
  float N_minus_mu5 = 0;
  float N_minus_mu6 = 0;
  float N_minus_mu7 = 0;
  float N_minus_mu8 = 0;
  float N_plus_mu = 0;
  float N_minus_mu = 0;
  float N_plus1 = 0;
  float N_minus1 = 0;
  float N_plus2 = 0;
  float N_minus2 = 0;
  ///////////////elept(tt~)//////////////////
  float N_plus_ele1pt = 0;
  float N_plus_ele2pt = 0;
  float N_plus_ele3pt = 0;
  float N_plus_ele4pt = 0;
  float N_minus_ele1pt = 0;
  float N_minus_ele2pt = 0;
  float N_minus_ele3pt = 0;
  float N_minus_ele4pt = 0;
  ///////////////mupt(tt~)///////////////////
  float N_plus_mu1pt = 0;
  float N_plus_mu2pt = 0;
  float N_plus_mu3pt = 0;
  float N_plus_mu4pt = 0;
  float N_minus_mu1pt = 0;
  float N_minus_mu2pt = 0;
  float N_minus_mu3pt = 0;
  float N_minus_mu4pt = 0;
  ////////////////elept(pho)////////////////
  float N_plus_ele1phopt = 0;
  float N_plus_ele2phopt = 0;
  float N_plus_ele3phopt = 0;
  float N_plus_ele4phopt = 0;
  float N_minus_ele1phopt = 0;
  float N_minus_ele2phopt = 0;
  float N_minus_ele3phopt = 0;
  float N_minus_ele4phopt = 0;
  ////////////////mupt(pho)///////////////////
  float N_plus_mu1phopt = 0;
  float N_plus_mu2phopt = 0;
  float N_plus_mu3phopt = 0;
  float N_plus_mu4phopt = 0;
  float N_minus_mu1phopt = 0;
  float N_minus_mu2phopt = 0;
  float N_minus_mu3phopt = 0;
  float N_minus_mu4phopt = 0;

  tree1->Branch("N_plus1", &N_plus1, "N_plus1/F");
  tree1->Branch("N_minus1", &N_minus1, "N_minus1/F");
  tree1->Branch("N_plus2", &N_plus2, "N_plus2/F");
  tree1->Branch("N_minus2", &N_minus2, "N_minus2/F");

  TLorentzVector TopLep;
  TLorentzVector TopHad;
  TLorentzVector AntiTopLep;
  TLorentzVector AntiTopHad;
  TLorentzVector Top;
  TLorentzVector AntiTop;

  // TLorentzVector TopAntiTop = Top + AntiTop;
  Float_t YT_ele;
  Float_t Yt_ele;
  Float_t sub_ele;
  Float_t YT_mu;
  Float_t Yt_mu;
  Float_t sub_mu;
  Float_t YT1, YT2;
  Float_t Yt1, Yt2;
  Float_t YPho;
  Float_t sub1, sub2;
  Float_t Mass, NetMass, NetMass1, NetMass2, NetMass3, NetMass4, NetMass5, NetMass6, NetMass7, NetMass8;
  Float_t Pt_ele, Pt_ele1, Pt_ele2, Pt_ele3, Pt_ele4;
  Float_t Pt_mu, Pt_mu1, Pt_mu2, Pt_mu3, Pt_mu4;
  Float_t PhoPt_ele, PhoPt_ele1, PhoPt_ele2, PhoPt_ele3, PhoPt_ele4;
  Float_t PhoPt_mu, PhoPt_mu1, PhoPt_mu2, PhoPt_mu3, PhoPt_mu4;
  Float_t PhoPt;
  float Ac1, Ac2;